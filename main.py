import streamlit as st
st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ –≤–æ—Ä–æ–Ω–∫–∏ –±–æ—Ç–∞", layout="wide")

import pandas as pd

# –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤
file_path = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¢–ë - 2 –û–ø–µ—Ä–∞—Ç–æ—Ä –¢–ë - –í—Ö–æ–¥—è—â–∏–π –í–ê (7).xlsx"

###############################################################################
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–´–ß–ò–°–õ–ï–ù–ò–ô –ò –û–¢–†–ò–°–û–í–ö–ò
###############################################################################

def get_bar_width(value, max_val, base_width=80, min_width=5):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∏—Ä–∏–Ω—É (–≤ %) –¥–ª—è –ø–æ–ª–æ—Å—ã, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é value –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ max_val."""
    if max_val <= 0:
        return f"{min_width}%"
    ratio = value / max_val
    width = ratio * base_width
    if width < min_width:
        width = min_width
    return f"{width}%"

def draw_bar(label, count, color, max_val, font_size="20px", margin="10px auto"):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π –ø–æ–ª–æ—Å—ã (–¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏ —Ç–æ–ø-–æ—Ç–≤–µ—Ç–æ–≤ –∫—Ä–æ—Å—Å-–ø—Ä–æ–¥–∞–∂)."""
    bar_width = get_bar_width(count, max_val)
    bar_html = f"""
    <div style="
         background-color: {color};
         padding: 10px;
         margin: {margin};
         width: {bar_width};
         border-radius: 5px;
         text-align: center;
         color: white;">
        <span style="font-size: {font_size};"><b>{label}: {count}</b></span>
    </div>
    """
    st.markdown(bar_html, unsafe_allow_html=True)

def short_label(column_name, max_len=50):
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞."""
    s = " ".join(column_name.splitlines()).strip()
    return s if len(s) <= max_len else s[:max_len] + "..."

def draw_double_bar(main_label, get_count, other_count, max_val, color="purple"):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–≤–æ–π–Ω–æ–π –ø–æ–ª–æ—Å—ã (–¥–ª—è —ç—Ç–∞–ø–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—Å—Å-–ø—Ä–æ–¥–∞–∂: ¬´–ø–æ–ª—É—á–∏—Ç—å¬ª –∏ ¬´–¥—Ä—É–≥–æ–µ¬ª)."""
    get_width = get_bar_width(get_count, max_val)
    other_width = get_bar_width(other_count, max_val)
    block_html = f"""
    <div style="margin-bottom: 20px;">
      <div style="font-size:20px; font-weight:bold; text-align:center; margin-bottom: 10px;">{main_label}</div>
      <div style="display: flex; justify-content: center; gap: 20px;">
        <div style="background-color: {color}; color: white; padding: 10px; border-radius: 5px; text-align:center; width: {get_width};">
            {get_count}
        </div>
        <div style="background-color: {color}; color: white; padding: 10px; border-radius: 5px; text-align:center; width: {other_width};">
            {other_count}
        </div>
      </div>
      <div style="display: flex; justify-content: center; gap: 20px; margin-top: 5px;">
          <div style="width: {get_width}; text-align: center; font-size:18px;">–ü–æ–ª—É—á–∏—Ç—å</div>
          <div style="width: {other_width}; text-align: center; font-size:18px;">–î—Ä—É–≥–æ–µ</div>
      </div>
    </div>
    """
    st.markdown(block_html, unsafe_allow_html=True)

def draw_stage_row(stage_name, responses, max_val, color="green"):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç—Ç–∞–ø–∞ ¬´–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π¬ª: —Å–ª–µ–≤–∞ –Ω–∞–¥–ø–∏—Å—å "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π:",
    —Å–ø—Ä–∞–≤–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–æ—Å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤–Ω—É—Ç—Ä–∏) —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –ø–æ–¥ –Ω–∏–º–∏.
    responses: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(label, count), ...].
    """
    stage_html = f"""
    <div style="display: flex; align-items: center; margin-bottom: 20px;">
      <div style="width: 200px; text-align: right; font-weight: bold; margin-right: 20px;">
         {stage_name}:
      </div>
      <div style="display: flex; gap: 20px; align-items: center;">
    """
    for label, count in responses:
        bar_width = get_bar_width(count, max_val)
        stage_html += f"""
         <div style="display: flex; flex-direction: column; align-items: center;">
           <div style="background-color: {color}; width: {bar_width}; padding: 10px; border-radius: 5px; text-align: center; color: white;">
             {count}
           </div>
           <div style="margin-top: 5px; font-size: 18px;">{label}</div>
         </div>
        """
    stage_html += "</div></div>"
    st.markdown(stage_html, unsafe_allow_html=True)

def process_sheet(df_raw):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ª–∏—Å—Ç (df_raw) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å:
    - –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞,
    - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏,
    - –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞.
    """
    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ 3, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if len(df_raw) < 3:
        return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot_name = df_raw.iloc[0, 0]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Äì –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
    headers = df_raw.iloc[1]

    # –î–∞–Ω–Ω—ã–µ ‚Äì –Ω–∞—á–∏–Ω–∞—è —Å —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–∏
    df = pd.DataFrame(df_raw.iloc[2:].values, columns=headers)

    # --- 1. –≠—Ç–∞–ø: –ê–∫—Ç–∏–≤–∞—Ü–∏–π ---
    candidate_activation_cols = []
    for col in df.columns:
        if isinstance(col, str):
            if "HeadHunter" in col:
                candidate_activation_cols.append(col)
            elif "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º" in col:
                candidate_activation_cols.append(col)

    activation_col = None
    activation_count = 0
    if candidate_activation_cols:
        counts = {col: df[col].notna().sum() for col in candidate_activation_cols}
        activation_col = max(counts, key=counts.get)
        activation_count = counts[activation_col]

    # --- 2. –≠—Ç–∞–ø: –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π ---
    job_desc_candidate = None
    max_keyword_count = 0
    for col in df.columns:
        if col in candidate_activation_cols:
            continue
        series = df[col].astype(str)
        keyword_count = series.str.contains("–ß—Ç–æ –µ—â–µ", case=False, na=False).sum() + \
                        series.str.contains("–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", case=False, na=False).sum()
        if keyword_count > max_keyword_count:
            max_keyword_count = keyword_count
            job_desc_candidate = col

    if job_desc_candidate:
        likes_count = df[job_desc_candidate].astype(str).str.contains("–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", case=False, na=False).sum()
        what_else_count = df[job_desc_candidate].astype(str).str.contains("–ß—Ç–æ –µ—â–µ", case=False, na=False).sum()
        not_answered_count = activation_count - (likes_count + what_else_count)
    else:
        likes_count = what_else_count = not_answered_count = 0

    # --- 3. –≠—Ç–∞–ø: –ö—Ä–æ—Å—Å‚Äë–ø—Ä–æ–¥–∞–∂–∏ ---
    cross_selling_title = """/#*–ü–æ–∫–∞ –∂–¥–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –¥—É–º–∞–µ—Ç–µ –Ω–∞–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã, —Å–¥–µ–ª–∞–π—Ç–µ –≤–∞–∂–Ω—ã–π —à–∞–≥!*

üéâ –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å 2* –±–æ–Ω—É—Å–∞*, –∫–æ—Ç–æ—Ä—ã–µ, –Ω–∞–¥–µ–µ–º—Å—è, –±—É–¥—É—Ç –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã. 

üöÄ *–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –∑–∞ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ!*
–í—ã–±–µ—Ä–∏—Ç–µ! #/"""

    cross_selling_col = None
    for col in df.columns:
        if isinstance(col, str) and col.strip() == cross_selling_title.strip():
            cross_selling_col = col
            break

    if cross_selling_col:
        cs_counts = df[cross_selling_col].value_counts(dropna=True)
        top3 = cs_counts.head(3)
        cs_no_response = (likes_count + what_else_count) - top3.sum()
    else:
        top3 = None
        cs_no_response = 0

    # --- 4. –≠—Ç–∞–ø: –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—Å—Å‚Äë–ø—Ä–æ–¥–∞–∂ ---
    cs_detail_candidates = {}
    for col in df.columns:
        if col in candidate_activation_cols or col == job_desc_candidate or col == cross_selling_col:
            continue
        series_lower = df[col].astype(str).str.lower()
        if "–ø–æ–ª—É—á–∏—Ç—å" in series_lower.values and "–¥—Ä—É–≥–æ–µ" in series_lower.values:
            cnt = (series_lower == "–ø–æ–ª—É—á–∏—Ç—å").sum() + (series_lower == "–¥—Ä—É–≥–æ–µ").sum()
            cs_detail_candidates[col] = cnt

    cs_detail_cols = sorted(cs_detail_candidates, key=lambda x: cs_detail_candidates[x], reverse=True)[:2]
    cs_detail_counts = {}
    for col in cs_detail_cols:
        series_lower = df[col].astype(str).str.lower().str.strip()
        cs_detail_counts[col] = {
            "–ø–æ–ª—É—á–∏—Ç—å": int((series_lower == "–ø–æ–ª—É—á–∏—Ç—å").sum()),
            "–¥—Ä—É–≥–æ–µ": int((series_lower == "–¥—Ä—É–≥–æ–µ").sum())
        }

    # --- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ max ---
    all_values = [
        activation_count,
        likes_count,
        what_else_count,
        not_answered_count,
        cs_no_response
    ]
    if top3 is not None:
        all_values.extend(top3.values)
    for col in cs_detail_cols:
        detail = cs_detail_counts[col]
        all_values.append(detail["–ø–æ–ª—É—á–∏—Ç—å"])
        all_values.append(detail["–¥—Ä—É–≥–æ–µ"])

    global_max = max(all_values) if all_values else 1

    return {
        "bot_name": bot_name,
        "activation_count": activation_count,
        "likes_count": likes_count,
        "what_else_count": what_else_count,
        "not_answered_count": not_answered_count,
        "top3": top3,
        "cs_no_response": cs_no_response,
        "cs_detail_cols": cs_detail_cols,
        "cs_detail_counts": cs_detail_counts,
        "global_max": global_max
    }

###############################################################################
# –û–°–ù–û–í–ù–û–ô –ö–û–î: –°–ß–ò–¢–´–í–ê–ï–ú –í–°–ï –õ–ò–°–¢–´, –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´, –°–¢–†–û–ò–ú –î–ê–®–ë–û–†–î
###############################################################################

# –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã Excel
xl = pd.ExcelFile(file_path)
bots_data = []

for sheet_name in xl.sheet_names:
    df_raw = pd.read_excel(file_path, sheet_name=sheet_name, header=None)
    metrics = process_sheet(df_raw)
    if metrics is not None:
        bots_data.append(metrics)

# –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è
if not bots_data:
    st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ñ–∞–π–ª–µ.")
    st.stop()

# –í –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ A1)
bot_names = [d["bot_name"] for d in bots_data]
selected_bot_name = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞:", bot_names)

# –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
selected_data = next(d for d in bots_data if d["bot_name"] == selected_bot_name)

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
bot_name = selected_data["bot_name"]
activation_count = selected_data["activation_count"]
likes_count = selected_data["likes_count"]
what_else_count = selected_data["what_else_count"]
not_answered_count = selected_data["not_answered_count"]
top3 = selected_data["top3"]
cs_no_response = selected_data["cs_no_response"]
cs_detail_cols = selected_data["cs_detail_cols"]
cs_detail_counts = selected_data["cs_detail_counts"]
global_max = selected_data["global_max"]

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ ---

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
st.markdown(f"<h1 style='text-align: center;'><b>{bot_name}</b></h1>", unsafe_allow_html=True)
st.markdown("<hr>", unsafe_allow_html=True)

# --- –≠—Ç–∞–ø 1: –ê–∫—Ç–∏–≤–∞—Ü–∏–π (—Å–∏–Ω—è—è –ø–æ–ª–æ—Å–∞) ---
draw_bar("–ê–∫—Ç–∏–≤–∞—Ü–∏–π", activation_count, "blue", global_max)


# --- –≠—Ç–∞–ø 2: –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π ---
st.markdown("<h3 style='text-align: center;'><b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π</b></h1>", unsafe_allow_html=True)
draw_bar("–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", likes_count, "green", global_max)
draw_bar("–ß—Ç–æ –µ—â–µ", what_else_count, "green", global_max, font_size="18px", margin="0px auto 20px auto")
draw_bar("–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏", not_answered_count, "green", global_max, font_size="18px", margin="0px auto 20px auto")


# --- –≠—Ç–∞–ø 3: –ö—Ä–æ—Å—Å‚Äë–ø—Ä–æ–¥–∞–∂–∏ (–æ—Ä–∞–Ω–∂–µ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞) ---
st.markdown("<h3 style='text-align: center;'><b>–ö—Ä–æ—Å—Å‚Äë–ø—Ä–æ–¥–∞–∂–∏</b></h3>", unsafe_allow_html=True)
if top3 is not None:
    for response, count in top3.items():
        draw_bar(response, count, "orange", global_max)
draw_bar("–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏", cs_no_response, "orange", global_max, font_size="18px", margin="0px auto 20px auto")

# --- –≠—Ç–∞–ø 4: –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—Å—Å‚Äë–ø—Ä–æ–¥–∞–∂ ---
if cs_detail_cols:
    for idx, col in enumerate(cs_detail_cols, start=1):
        detail = cs_detail_counts[col]
        col_short = short_label(col)
        main_label = f"–ö—Ä–æ—Å—Å –ø—Ä–æ–¥–∞–∂–∞ {idx} ({col_short})"
        draw_double_bar(main_label, detail["–ø–æ–ª—É—á–∏—Ç—å"], detail["–¥—Ä—É–≥–æ–µ"], global_max, color="purple")
